name: Release # Workflow name displayed on GitHub

on:
  workflow_dispatch: # Trigger manually
    branches: main # Branch on which the workflow will run

jobs:
  new-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Checkout our working repository
#      - name: Conventional Changelog Action
#        id: changelog
#        uses: TriPSs/conventional-changelog-action@v3
#        with:
#            github-token: ${{ secrets.github_token }}
#            output-file: "false"
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Prepare Release
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          ./gradlew release -Prelease.useAutomaticVersion=true
          last_release_tag=`git describe --abbrev=0 --tags`
          echo "Last release tag: $last_release_tag"
          gh release upload $last_release_tag ./build/libs/*
      # Upload artifact as a release asset
#      - name: Upload Release Asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          last_release_tag=`git describe --abbrev=0 --tags`
#          echo "Last release tag: $last_release_tag"
#          gh release upload $last_release_tag ./build/libs/*
#      - name: Publish Release # This action will create the actual release
#        uses: actions/create-release@v1
##        if: ${{ steps.changelog.outputs.skipped == 'false' }}
#        env:
#            GITHUB_TOKEN: ${{ secrets.github_token }}
#        with:
#            tag_name: ${{ steps.changelog.outputs.tag }}
#            release_name: ${{ steps.changelog.outputs.tag }}
#            body: ${{ steps.changelog.outputs.clean_changelog }}
#
#name: Release
#
#on:
#  push:
#    tags:
#      - '*'
##  release:
##    types: [prereleased, released]
#
#jobs:
#  # Prepare and publish the plugin
#  release:
#
#    if: contains(github.event.head_commit.message, '[Gradle Release Plugin] - pre tag commit:')
#    name: Release plugin
#    runs-on: ubuntu-latest
#    steps:
#
#      # Check out current repository
#      - name: Fetch Sources
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.release.tag_name }}
#
#      - name: Setup Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: adopt
#          java-version: 11
#
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@v2
#
#      # Set environment variables
##      - name: Export Properties
##        id: properties
##        shell: bash
##        run: |
##          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
##          ${{ github.event.release.body }}
##          EOM
##          )"
##
##          echo "changelog<<EOF" >> $GITHUB_OUTPUT
##          echo "$CHANGELOG" >> $GITHUB_OUTPUT
##          echo "EOF" >> $GITHUB_OUTPUT
#
#      # Update Unreleased section with the current release note
##      - name: Patch Changelog
##        if: ${{ steps.properties.outputs.changelog != '' }}
##        env:
##          CHANGELOG: ${{ steps.properties.outputs.changelog }}
##        run: |
##          ./gradlew patchChangelog --release-note="$CHANGELOG"
#
#      # Publish the plugin to the Gradle Plugins
#      - name: Publish Plugin
#        env:
#          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
#          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
#        run: ./gradlew publishPlugins -Pgradle.publish.key=$GRADLE_PUBLISH_KEY -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET
#
#      # Upload artifact as a release asset
#      - name: Upload Release Asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release upload ${{ github.event.release.tag_name }} ./build/libs/*
#
#      # Create pull request
#      - name: Create Pull Request
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          VERSION="${{ github.event.release.tag_name }}"
#          BRANCH="changelog-update-$VERSION"
#          LABEL="release changelog"
#
#          git config user.email "action@github.com"
#          git config user.name "GitHub Action"
#
#          git checkout -b $BRANCH
#          git commit -am "Changelog update - $VERSION"
#          git push --set-upstream origin $BRANCH
#
#          gh label create "$LABEL" \
#            --description "Pull requests with release changelog update" \
#            || true
#
#          gh pr create \
#            --title "Changelog update - \`$VERSION\`" \
#            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
#            --label "$LABEL" \
#            --head $BRANCH